import { React, useEffect, useRef, useState } from "react";
import CountUp from "react-countup";
const SectionCount = () => {
  const sectionRef = useRef(null);
  const [inView, setInView] = useState(false);
  /*useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setInView(true);
          observer.disconnect(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
        }
      },
      {
        threshold: 0.5, // –°–∫–æ–ª—å–∫–æ % —Å–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ
      }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, []);*/
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setInView(true); // 4Ô∏è‚É£ –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
          observer.disconnect(); // (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        }
      },
      {
        threshold: 0.5, // 3Ô∏è‚É£ –£—Å–ª–æ–≤–∏–µ: —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –Ω–∞ 50% –≤–∏–¥–µ–Ω
      }
    );
    console.log(inView);

    if (sectionRef.current) {
      observer.observe(sectionRef.current); // 2Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç –≤ observer
    }

    return () => observer.disconnect(); // üßπ –û—á–∏—Å—Ç–∫–∞
  }, []);
  return (
    <>
      <section ref={sectionRef}>
        <div>
          {console.log(inView, sectionRef)}
          <CountUp start={0} end={100} delay={5} duration={2.75} />
        </div>
      </section>
    </>
  );
};

export default SectionCount;
